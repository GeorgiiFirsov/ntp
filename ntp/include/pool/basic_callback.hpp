/**
 * @file basic_callback.hpp
 * @brief Interfaces and base classes for callback wrappers
 */

#pragma once

#include <functional>

#include "config.hpp"


namespace ntp::details {

/**
 * @brief Cancellation test timeout, while waiting for callbacks.
 *        Set to 500 msec.
 */
NTP_INLINE constexpr auto kTestCancelTimeout = 500ul;


/**
 * @brief Cancellation checker for threadpool
 * 
 * @returns true if cancellation requested, false -- otherwise
 */
using test_cancel_t = std::function<bool()>;


/**
 * @brief Interface for callback wrapper
 */
struct alignas(NTP_ALLOCATION_ALIGNMENT) ICallback
    : public ntp::details::NativeSlistEntry

{
    /**
	 * @brief Virtual destructor (generated by compiler)
	 */
    virtual ~ICallback() = default;

    /**
	 * @brief Method to invoke callback with an optional argument
	 * 
	 * @param parameter Optional user defined pointer-sized parameter
	 */
    virtual void Call(void* parameter) = 0;
};


/**
 * @brief Base class for all callbacks' managers
 */
class BasicManager
{
public:
    /**
	 * @brief Constructor, that saves an environment associated with a threadpool
	 */
    explicit BasicManager(PTP_CALLBACK_ENVIRON environment) noexcept
        : environment_(environment)
    { }

protected:
    /**
	 * @brief Get an environment associated with owning threadpool
	 * 
	 * @returns Pointer to the environment
	 */
    PTP_CALLBACK_ENVIRON Environment() const noexcept { return environment_; }

private:
    // Non-owning pointer to environment associated with a threadpool
    PTP_CALLBACK_ENVIRON environment_;
};

}  // namespace ntp::details
